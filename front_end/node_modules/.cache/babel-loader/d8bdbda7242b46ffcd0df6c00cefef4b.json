{"ast":null,"code":"var _jsxFileName = \"/Users/jk/Documents/Online Classes/Solidity Class/defi-stake-yield-brownie/front_end/src/components/yourWallet/StakeForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { Button, Input, CircularProgress } from \"@material-ui/core\";\nimport React, { useState, useEffect } from \"react\";\nimport { utils } from \"ethers\";\nimport { useStakeTokens } from \"../../hooks/useStakeStokens\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const StakeForm = _ref => {\n  _s();\n\n  let {\n    token\n  } = _ref;\n  const {\n    address: tokenAddress,\n    name\n  } = token;\n  const {\n    account\n  } = useEthers();\n  const tokenBalance = useTokenBalance(tokenAddress, account);\n  const formattedTokenBalance = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0;\n  const {\n    notifications\n  } = useNotifications();\n  const [amount, setAmount] = useState(0);\n\n  const handleInputChange = event => {\n    const newAmount = event.target.value === \"\" ? \"\" : Number(event.target.value);\n    setAmount(newAmount);\n    console.log(newAmount);\n  };\n\n  const {\n    approveAndStake,\n    approveAndStakeErc20State\n  } = useStakeTokens(tokenAddress);\n\n  const handleStakeSubmit = () => {\n    const amountAsWei = utils.parseEther(amount.toString());\n    return approveAndStake(amountAsWei.toString());\n  };\n\n  const isMining = approveAndStakeErc20State.status === \"Mining\";\n  useEffect(() => {\n    if (notifications.filter(notification => notification.type === \"transactionSucceed\" && notification.transactionName === \"Approve ERC20 transfer\").length > 0) {\n      console.log(\"Approved!\");\n    }\n\n    if (notifications.filter(notification => notification.type === \"transactionSucceed\" && notification.transactionName === \"Stake Tokens\").length > 0) {\n      console.log(\"Tokens Staked!\");\n    }\n  }, [notifications]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"primary\",\n      size: \"large\",\n      onClick: handleStakeSubmit,\n      disabled: isMining,\n      children: isMining ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n        size: 26\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 28\n      }, this) : \"Stake!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(StakeForm, \"ctS1PlRSIkDHA/3TdBX0m4ibItg=\", false, function () {\n  return [useEthers, useTokenBalance, useNotifications, useStakeTokens];\n});\n\n_c = StakeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakeForm\");","map":{"version":3,"sources":["/Users/jk/Documents/Online Classes/Solidity Class/defi-stake-yield-brownie/front_end/src/components/yourWallet/StakeForm.tsx"],"names":["useEthers","useTokenBalance","useNotifications","formatUnits","Button","Input","CircularProgress","React","useState","useEffect","utils","useStakeTokens","StakeForm","token","address","tokenAddress","name","account","tokenBalance","formattedTokenBalance","parseFloat","notifications","amount","setAmount","handleInputChange","event","newAmount","target","value","Number","console","log","approveAndStake","approveAndStakeErc20State","handleStakeSubmit","amountAsWei","parseEther","toString","isMining","status","filter","notification","type","transactionName","length"],"mappings":"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","sourcesContent":["import {Token} from \"../Main\"\nimport {useEthers, useTokenBalance, useNotifications} from \"@usedapp/core\"\nimport {formatUnits} from \"@ethersproject/units\"\nimport {Button, Input, CircularProgress} from \"@material-ui/core\"\nimport React, {useState, useEffect} from \"react\"\nimport {constants, utils} from \"ethers\"\nimport {useStakeTokens} from \"../../hooks/useStakeStokens\"\nimport {Contract} from \"@ethersproject/contracts\"\n\nexport interface StakeFormProps {\n    token: Token\n}\n\nexport const StakeForm = ({token}: StakeFormProps) => {\n    const {address: tokenAddress, name} = token\n    const { account } = useEthers()\n    const tokenBalance = useTokenBalance(tokenAddress, account)\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n\n    const {notifications} = useNotifications()\n\n    const [amount, setAmount] = useState<number | string | Array<number | string>>(0)\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newAmount = event.target.value === \"\" ? \"\" : Number(event.target.value)\n        setAmount(newAmount)\n        console.log(newAmount)\n    }\n\n    const {approveAndStake, approveAndStakeErc20State} = useStakeTokens(tokenAddress)\n    const handleStakeSubmit = () => {\n        const amountAsWei = utils.parseEther(amount.toString())\n        return approveAndStake(amountAsWei.toString())\n    }\n\n    const isMining = approveAndStakeErc20State.status === \"Mining\"\n\n    useEffect(() => {\n        if(notifications.filter(\n            (notification) => \n                notification.type === \"transactionSucceed\" && notification.transactionName === \"Approve ERC20 transfer\"\n        ).length > 0 ){\n            console.log(\"Approved!\")\n        }\n        if(notifications.filter(\n            (notification) => notification.type === \"transactionSucceed\" && notification.transactionName === \"Stake Tokens\"\n        ).length > 0){\n            console.log(\"Tokens Staked!\")\n        }\n    }, [notifications])\n\n    return(\n        <>\n            <Input onChange={handleInputChange} />\n            <Button color=\"primary\" size=\"large\"\n                onClick={handleStakeSubmit}\n                disabled={isMining}\n                >\n                {isMining? <CircularProgress size={26} /> : \"Stake!!\"}\n            </Button>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}