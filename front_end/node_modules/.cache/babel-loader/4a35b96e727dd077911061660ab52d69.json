{"ast":null,"code":"var _jsxFileName = \"/Users/jk/Documents/Online Classes/Solidity Class/defi-stake-yield-brownie/front_end/src/components/yourWallet/StakeForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEthers, useTokenBalance } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { Button, Input } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { useStakeTokens } from \"../../hooks/useStakeStokens\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const StakeForm = _ref => {\n  _s();\n\n  let {\n    token\n  } = _ref;\n  const {\n    address: tokenAddress,\n    name\n  } = token;\n  const {\n    account\n  } = useEthers();\n  const tokenBalance = useTokenBalance(tokenAddress, account);\n  const formattedTokenBalance = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0;\n  const [amount, setAmount] = useState(0);\n\n  const handleInputChange = event => {\n    const newAmount = event.target.value === \"\" ? \"\" : Number(event.target.value);\n    setAmount(newAmount);\n    console.log(newAmount);\n  };\n\n  const {\n    approve,\n    approveErc20State\n  } = useStakeTokens(tokenAddress);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"primary\",\n      size: \"large\",\n      children: \"Stake!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(StakeForm, \"M3aNzYa25FA8FbEsFaJZ8pIVAeg=\", false, function () {\n  return [useEthers, useTokenBalance, useStakeTokens];\n});\n\n_c = StakeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakeForm\");","map":{"version":3,"sources":["/Users/jk/Documents/Online Classes/Solidity Class/defi-stake-yield-brownie/front_end/src/components/yourWallet/StakeForm.tsx"],"names":["useEthers","useTokenBalance","formatUnits","Button","Input","React","useState","useStakeTokens","StakeForm","token","address","tokenAddress","name","account","tokenBalance","formattedTokenBalance","parseFloat","amount","setAmount","handleInputChange","event","newAmount","target","value","Number","console","log","approve","approveErc20State"],"mappings":";;;AACA,SAAQA,SAAR,EAAmBC,eAAnB,QAAyC,eAAzC;AACA,SAAQC,WAAR,QAA0B,sBAA1B;AACA,SAAQC,MAAR,EAAgBC,KAAhB,QAA4B,mBAA5B;AACA,OAAOC,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AAEA,SAAQC,cAAR,QAA6B,6BAA7B;;;AAMA,OAAO,MAAMC,SAAS,GAAG,QAA6B;AAAA;;AAAA,MAA5B;AAACC,IAAAA;AAAD,GAA4B;AAClD,QAAM;AAACC,IAAAA,OAAO,EAAEC,YAAV;AAAwBC,IAAAA;AAAxB,MAAgCH,KAAtC;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAcb,SAAS,EAA7B;AACA,QAAMc,YAAY,GAAGb,eAAe,CAACU,YAAD,EAAeE,OAAf,CAApC;AACA,QAAME,qBAA6B,GAAGD,YAAY,GAAGE,UAAU,CAACd,WAAW,CAACY,YAAD,EAAe,EAAf,CAAZ,CAAb,GAA+C,CAAjG;AACA,QAAM,CAACG,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAA2C,CAA3C,CAApC;;AACA,QAAMa,iBAAiB,GAAIC,KAAD,IAAgD;AACtE,UAAMC,SAAS,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,KAAuB,EAAvB,GAA4B,EAA5B,GAAiCC,MAAM,CAACJ,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAzD;AACAL,IAAAA,SAAS,CAACG,SAAD,CAAT;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;AACH,GAJD;;AAMA,QAAM;AAACM,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAA+BrB,cAAc,CAACI,YAAD,CAAnD;AAEA,sBACI;AAAA,4BACI,QAAC,KAAD;AAAO,MAAA,QAAQ,EAAEQ;AAAjB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,SAAd;AAAwB,MAAA,IAAI,EAAC,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AAQH,CAtBM;;GAAMX,S;UAEWR,S,EACCC,e,EASgBM,c;;;KAZ5BC,S","sourcesContent":["import {Token} from \"../Main\"\nimport {useEthers, useTokenBalance} from \"@usedapp/core\"\nimport {formatUnits} from \"@ethersproject/units\"\nimport {Button, Input} from \"@material-ui/core\"\nimport React, {useState} from \"react\"\nimport {constants, utils} from \"ethers\"\nimport {useStakeTokens} from \"../../hooks/useStakeStokens\"\n\nexport interface StakeFormProps {\n    token: Token\n}\n\nexport const StakeForm = ({token}: StakeFormProps) => {\n    const {address: tokenAddress, name} = token\n    const { account } = useEthers()\n    const tokenBalance = useTokenBalance(tokenAddress, account)\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    const [amount, setAmount] = useState<number | string | Array<number | string>>(0)\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newAmount = event.target.value === \"\" ? \"\" : Number(event.target.value)\n        setAmount(newAmount)\n        console.log(newAmount)\n    }\n\n    const {approve, approveErc20State} = useStakeTokens(tokenAddress)\n\n    return(\n        <>\n            <Input onChange={handleInputChange} />\n            <Button color=\"primary\" size=\"large\">\n                Stake!\n            </Button>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}