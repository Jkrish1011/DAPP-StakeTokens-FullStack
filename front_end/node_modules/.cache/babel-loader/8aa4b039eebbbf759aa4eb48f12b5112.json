{"ast":null,"code":"var _s = $RefreshSig$();\n\n// hooks are basically like components, its different in terms of functionality.\nimport { useEthers, useContractFunction } from \"@usedapp/core\";\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\";\nimport ERC20 from \"../chain-info/contracts/DappToken.json\";\nimport networkMapping from \"../chain-info/deployments/map.json\";\nimport { constants, utils } from \"ethers\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { useState, useEffect } from \"react\";\nexport const useStakeTokens = tokenAddress => {\n  _s();\n\n  const {\n    chainId\n  } = useEthers();\n  const {\n    abi\n  } = TokenFarm; //chainId ? networkMapping[String(chainId)][\"DappToken\"][0] : constants.AddressZero\n\n  const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero;\n  const tokenFarmInterface = new utils.Interface(abi);\n  const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface);\n  const erc20ABI = ERC20.abi;\n  const erc20Interface = new utils.Interface(erc20ABI);\n  const erc20Contract = new Contract(tokenAddress, erc20Interface); //Aprove and Stake tokens\n\n  const {\n    send: approveErc20Send,\n    state: approveAndStakeErc20State\n  } = useContractFunction(erc20Contract, \"approve\", {\n    transactionName: \"Approve ERC20 transfer\"\n  });\n\n  const approveAndStake = amount => {\n    setAmountToStake(parseInt(amount));\n    return approveErc20Send(tokenFarmAddress, amount);\n  };\n\n  const [state, setState] = useState(approveAndStakeErc20State);\n  const {\n    send: stakeSend,\n    state: stakeState\n  } = useContractFunction(tokenFarmContract, \"stakeTokens\", {\n    transactionName: \"stake Tokens\"\n  });\n  const [amountToStake, setAmountToStake] = useState(0);\n  useEffect(() => {\n    if (approveAndStakeErc20State.status === \"Success\") {\n      //call stake function.\n      stakeSend(amountToStake, amountToStake, tokenAddress);\n    }\n  }, [approveAndStakeErc20State, tokenAddress]);\n  return {\n    approveAndStake,\n    approveErc20State\n  };\n};\n\n_s(useStakeTokens, \"XpF+GmcDcdj/TK+WsmUxSkMHsEk=\", false, function () {\n  return [useEthers, useContractFunction, useContractFunction];\n});","map":{"version":3,"sources":["/Users/jk/Documents/Online Classes/Solidity Class/defi-stake-yield-brownie/front_end/src/hooks/useStakeStokens.ts"],"names":["useEthers","useContractFunction","TokenFarm","ERC20","networkMapping","constants","utils","Contract","useState","useEffect","useStakeTokens","tokenAddress","chainId","abi","tokenFarmAddress","String","AddressZero","tokenFarmInterface","Interface","tokenFarmContract","erc20ABI","erc20Interface","erc20Contract","send","approveErc20Send","state","approveAndStakeErc20State","transactionName","approveAndStake","amount","setAmountToStake","parseInt","setState","stakeSend","stakeState","amountToStake","status","approveErc20State"],"mappings":";;AAAA;AACA,SAAQA,SAAR,EAAmBC,mBAAnB,QAA6C,eAA7C;AACA,OAAOC,SAAP,MAAsB,wCAAtB;AACA,OAAOC,KAAP,MAAkB,wCAAlB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,SAAQC,SAAR,EAAmBC,KAAnB,QAA+B,QAA/B;AACA,SAAQC,QAAR,QAAuB,0BAAvB;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AAEA,OAAO,MAAMC,cAAc,GAAIC,YAAD,IAA0B;AAAA;;AACpD,QAAM;AAACC,IAAAA;AAAD,MAAYZ,SAAS,EAA3B;AACA,QAAM;AAACa,IAAAA;AAAD,MAAQX,SAAd,CAFoD,CAGpD;;AACA,QAAMY,gBAAgB,GAAGF,OAAO,GAAGR,cAAc,CAACW,MAAM,CAACH,OAAD,CAAP,CAAd,CAAgC,WAAhC,EAA6C,CAA7C,CAAH,GAAqDP,SAAS,CAACW,WAA/F;AACA,QAAMC,kBAAkB,GAAG,IAAIX,KAAK,CAACY,SAAV,CAAoBL,GAApB,CAA3B;AACA,QAAMM,iBAAiB,GAAG,IAAIZ,QAAJ,CAAaO,gBAAb,EAAgCG,kBAAhC,CAA1B;AAEA,QAAMG,QAAQ,GAAGjB,KAAK,CAACU,GAAvB;AACA,QAAMQ,cAAc,GAAG,IAAIf,KAAK,CAACY,SAAV,CAAoBE,QAApB,CAAvB;AACA,QAAME,aAAa,GAAG,IAAIf,QAAJ,CAAaI,YAAb,EAA2BU,cAA3B,CAAtB,CAVoD,CAWpD;;AACA,QAAM;AAACE,IAAAA,IAAI,EAAEC,gBAAP;AAAyBC,IAAAA,KAAK,EAAEC;AAAhC,MAA6DzB,mBAAmB,CAACqB,aAAD,EAAgB,SAAhB,EAA2B;AAACK,IAAAA,eAAe,EAAE;AAAlB,GAA3B,CAAtF;;AACA,QAAMC,eAAe,GAAIC,MAAD,IAAoB;AACxCC,IAAAA,gBAAgB,CAACC,QAAQ,CAACF,MAAD,CAAT,CAAhB;AACA,WAAOL,gBAAgB,CAACV,gBAAD,EAAmBe,MAAnB,CAAvB;AACH,GAHD;;AAIA,QAAM,CAACJ,KAAD,EAAQO,QAAR,IAAoBxB,QAAQ,CAACkB,yBAAD,CAAlC;AAEA,QAAM;AAACH,IAAAA,IAAI,EAAEU,SAAP;AAAkBR,IAAAA,KAAK,EAAES;AAAzB,MAAuCjC,mBAAmB,CAACkB,iBAAD,EAAoB,aAApB,EAAmC;AAACQ,IAAAA,eAAe,EAAC;AAAjB,GAAnC,CAAhE;AAEA,QAAM,CAACQ,aAAD,EAAgBL,gBAAhB,IAAoCtB,QAAQ,CAAC,CAAD,CAAlD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGiB,yBAAyB,CAACU,MAA1B,KAAqC,SAAxC,EAAkD;AAC9C;AACAH,MAAAA,SAAS,CAACE,aAAD,EAAgBA,aAAhB,EAA+BxB,YAA/B,CAAT;AACH;AACJ,GALQ,EAKP,CAACe,yBAAD,EAA4Bf,YAA5B,CALO,CAAT;AAOA,SAAO;AAACiB,IAAAA,eAAD;AAAkBS,IAAAA;AAAlB,GAAP;AACH,CA/BM;;GAAM3B,c;UACSV,S,EAWiDC,mB,EAOtBA,mB","sourcesContent":["// hooks are basically like components, its different in terms of functionality.\nimport {useEthers, useContractFunction} from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\nimport ERC20 from \"../chain-info/contracts/DappToken.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport {constants, utils} from \"ethers\"\nimport {Contract} from \"@ethersproject/contracts\"\nimport {useState, useEffect} from \"react\"\n\nexport const useStakeTokens = (tokenAddress: string) => {\n    const {chainId} = useEthers()\n    const {abi} = TokenFarm\n    //chainId ? networkMapping[String(chainId)][\"DappToken\"][0] : constants.AddressZero\n    const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmAddress , tokenFarmInterface)\n\n    const erc20ABI = ERC20.abi\n    const erc20Interface = new utils.Interface(erc20ABI)\n    const erc20Contract = new Contract(tokenAddress, erc20Interface)\n    //Aprove and Stake tokens\n    const {send: approveErc20Send, state: approveAndStakeErc20State} = useContractFunction(erc20Contract, \"approve\", {transactionName: \"Approve ERC20 transfer\"})\n    const approveAndStake = (amount: string) => {\n        setAmountToStake(parseInt(amount))\n        return approveErc20Send(tokenFarmAddress, amount)\n    }\n    const [state, setState] = useState(approveAndStakeErc20State)\n\n    const {send: stakeSend, state: stakeState} = useContractFunction(tokenFarmContract, \"stakeTokens\", {transactionName:\"stake Tokens\"})\n\n    const [amountToStake, setAmountToStake] = useState(0)\n\n    useEffect(() => {\n        if(approveAndStakeErc20State.status === \"Success\"){\n            //call stake function.\n            stakeSend(amountToStake, amountToStake, tokenAddress)\n        }\n    },[approveAndStakeErc20State, tokenAddress])\n\n    return {approveAndStake, approveErc20State}\n}"]},"metadata":{},"sourceType":"module"}