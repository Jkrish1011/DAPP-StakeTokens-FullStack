{"ast":null,"code":"var _jsxFileName = \"/Users/jk/Documents/Online Classes/Solidity Class/defi-stake-yield-brownie/front_end/src/components/yourWallet/StakeForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { Button, Input, CircularProgress, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport React, { useState, useEffect } from \"react\";\nimport { utils } from \"ethers\";\nimport { useStakeTokens } from \"../../hooks/useStakeStokens\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const StakeForm = _ref => {\n  _s();\n\n  let {\n    token\n  } = _ref;\n  const {\n    address: tokenAddress,\n    name\n  } = token;\n  const {\n    account\n  } = useEthers();\n  const tokenBalance = useTokenBalance(tokenAddress, account);\n  const formattedTokenBalance = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0;\n  const {\n    notifications\n  } = useNotifications();\n  const [amount, setAmount] = useState(0);\n\n  const handleInputChange = event => {\n    const newAmount = event.target.value === \"\" ? \"\" : Number(event.target.value);\n    setAmount(newAmount);\n    console.log(newAmount);\n  };\n\n  const {\n    approveAndStake,\n    state: approveAndStakeErc20State\n  } = useStakeTokens(tokenAddress);\n\n  const handleStakeSubmit = () => {\n    const amountAsWei = utils.parseEther(amount.toString());\n    return approveAndStake(amountAsWei.toString());\n  };\n\n  const isMining = approveAndStakeErc20State.status === \"Mining\";\n  const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] = useState(false);\n  const [showStakeTokenSuccess, setStakeTokenSuccess] = useState(false);\n\n  const handleCloseSnack = () => {\n    setShowErc20ApprovalSuccess(false);\n    setStakeTokenSuccess(false);\n  };\n\n  useEffect(() => {\n    if (notifications.filter(notification => notification.type === \"transactionSucceed\" && notification.transactionName === \"Approve ERC20 transfer\").length > 0) {\n      console.log(\"Approved!\");\n      setShowErc20ApprovalSuccess(true);\n      setStakeTokenSuccess(false);\n    }\n\n    if (notifications.filter(notification => notification.type === \"transactionSucceed\" && notification.transactionName === \"Stake Tokens\").length > 0) {\n      console.log(\"Tokens Staked!\");\n      setShowErc20ApprovalSuccess(false);\n      setStakeTokenSuccess(true);\n    }\n  }, [notifications, showErc20ApprovalSuccess, showStakeTokenSuccess]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        size: \"large\",\n        onClick: handleStakeSubmit,\n        disabled: isMining,\n        children: isMining ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 26\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 28\n        }, this) : \"Stake!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: showErc20ApprovalSuccess,\n      autoHideDuration: 5000,\n      onClose: handleCloseSnack,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnack,\n        severity: \"success\",\n        children: \"ERC-20 Token Transfer approved! Now approve the 2nd Transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: showStakeTokenSuccess,\n      autoHideDuration: 5000,\n      onClose: handleCloseSnack,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnack,\n        severity: \"success\",\n        children: \"Tokens Staked!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(StakeForm, \"sWwORc9Cj4qBQGCXdeApNKOHL4U=\", false, function () {\n  return [useEthers, useTokenBalance, useNotifications, useStakeTokens];\n});\n\n_c = StakeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakeForm\");","map":{"version":3,"sources":["/Users/jk/Documents/Online Classes/Solidity Class/defi-stake-yield-brownie/front_end/src/components/yourWallet/StakeForm.tsx"],"names":["useEthers","useTokenBalance","useNotifications","formatUnits","Button","Input","CircularProgress","Snackbar","Alert","React","useState","useEffect","utils","useStakeTokens","StakeForm","token","address","tokenAddress","name","account","tokenBalance","formattedTokenBalance","parseFloat","notifications","amount","setAmount","handleInputChange","event","newAmount","target","value","Number","console","log","approveAndStake","state","approveAndStakeErc20State","handleStakeSubmit","amountAsWei","parseEther","toString","isMining","status","showErc20ApprovalSuccess","setShowErc20ApprovalSuccess","showStakeTokenSuccess","setStakeTokenSuccess","handleCloseSnack","filter","notification","type","transactionName","length"],"mappings":";;;AACA,SAAQA,SAAR,EAAmBC,eAAnB,EAAoCC,gBAApC,QAA2D,eAA3D;AACA,SAAQC,WAAR,QAA0B,sBAA1B;AACA,SAAQC,MAAR,EAAgBC,KAAhB,EAAuBC,gBAAvB,EAAyCC,QAAzC,QAAwD,mBAAxD;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAmBC,KAAnB,QAA+B,QAA/B;AACA,SAAQC,cAAR,QAA6B,6BAA7B;;;AAMA,OAAO,MAAMC,SAAS,GAAG,QAA6B;AAAA;;AAAA,MAA5B;AAACC,IAAAA;AAAD,GAA4B;AAClD,QAAM;AAACC,IAAAA,OAAO,EAAEC,YAAV;AAAwBC,IAAAA;AAAxB,MAAgCH,KAAtC;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAcnB,SAAS,EAA7B;AACA,QAAMoB,YAAY,GAAGnB,eAAe,CAACgB,YAAD,EAAeE,OAAf,CAApC;AACA,QAAME,qBAA6B,GAAGD,YAAY,GAAGE,UAAU,CAACnB,WAAW,CAACiB,YAAD,EAAe,EAAf,CAAZ,CAAb,GAA+C,CAAjG;AAEA,QAAM;AAACG,IAAAA;AAAD,MAAkBrB,gBAAgB,EAAxC;AAEA,QAAM,CAACsB,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAA2C,CAA3C,CAApC;;AACA,QAAMgB,iBAAiB,GAAIC,KAAD,IAAgD;AACtE,UAAMC,SAAS,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,KAAuB,EAAvB,GAA4B,EAA5B,GAAiCC,MAAM,CAACJ,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAzD;AACAL,IAAAA,SAAS,CAACG,SAAD,CAAT;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;AACH,GAJD;;AAMA,QAAM;AAACM,IAAAA,eAAD;AAAkBC,IAAAA,KAAK,EAAEC;AAAzB,MAAsDvB,cAAc,CAACI,YAAD,CAA1E;;AACA,QAAMoB,iBAAiB,GAAG,MAAM;AAC5B,UAAMC,WAAW,GAAG1B,KAAK,CAAC2B,UAAN,CAAiBf,MAAM,CAACgB,QAAP,EAAjB,CAApB;AACA,WAAON,eAAe,CAACI,WAAW,CAACE,QAAZ,EAAD,CAAtB;AACH,GAHD;;AAKA,QAAMC,QAAQ,GAAGL,yBAAyB,CAACM,MAA1B,KAAqC,QAAtD;AACA,QAAM,CAACC,wBAAD,EAA2BC,2BAA3B,IAA0DlC,QAAQ,CAAC,KAAD,CAAxE;AACA,QAAM,CAACmC,qBAAD,EAAwBC,oBAAxB,IAAgDpC,QAAQ,CAAC,KAAD,CAA9D;;AACA,QAAMqC,gBAAgB,GAAG,MAAM;AAC3BH,IAAAA,2BAA2B,CAAC,KAAD,CAA3B;AACAE,IAAAA,oBAAoB,CAAC,KAAD,CAApB;AACH,GAHD;;AAKAnC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGY,aAAa,CAACyB,MAAd,CACEC,YAAD,IACIA,YAAY,CAACC,IAAb,KAAsB,oBAAtB,IAA8CD,YAAY,CAACE,eAAb,KAAiC,wBAFpF,EAGDC,MAHC,GAGQ,CAHX,EAGc;AACVpB,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAW,MAAAA,2BAA2B,CAAC,IAAD,CAA3B;AACAE,MAAAA,oBAAoB,CAAC,KAAD,CAApB;AACH;;AACD,QAAGvB,aAAa,CAACyB,MAAd,CACEC,YAAD,IAAkBA,YAAY,CAACC,IAAb,KAAsB,oBAAtB,IAA8CD,YAAY,CAACE,eAAb,KAAiC,cADlG,EAEDC,MAFC,GAEQ,CAFX,EAEa;AACTpB,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAW,MAAAA,2BAA2B,CAAC,KAAD,CAA3B;AACAE,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACH;AACJ,GAhBQ,EAgBN,CAACvB,aAAD,EAAgBoB,wBAAhB,EAA0CE,qBAA1C,CAhBM,CAAT;AAkBA,sBACI;AAAA,4BACI,QAAC,KAAD;AAAO,MAAA,QAAQ,EAAEnB;AAAjB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,6BACA,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,SAAd;AAAwB,QAAA,IAAI,EAAC,OAA7B;AACI,QAAA,OAAO,EAAEW,iBADb;AAEI,QAAA,QAAQ,EAAEI,QAFd;AAAA,kBAIKA,QAAQ,gBAAE,QAAC,gBAAD;AAAkB,UAAA,IAAI,EAAE;AAAxB;AAAA;AAAA;AAAA;AAAA,gBAAF,GAAmC;AAJhD;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAUI,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEE,wBAAhB;AACI,MAAA,gBAAgB,EAAE,IADtB;AAEI,MAAA,OAAO,EAAEI,gBAFb;AAAA,6BAGQ,QAAC,KAAD;AAAO,QAAA,OAAO,EAAEA,gBAAhB;AAAkC,QAAA,QAAQ,EAAC,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHR;AAAA;AAAA;AAAA;AAAA,YAVJ,eAeI,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEF,qBAAhB;AACI,MAAA,gBAAgB,EAAE,IADtB;AAEI,MAAA,OAAO,EAAEE,gBAFb;AAAA,6BAGQ,QAAC,KAAD;AAAO,QAAA,OAAO,EAAEA,gBAAhB;AAAkC,QAAA,QAAQ,EAAC,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHR;AAAA;AAAA;AAAA;AAAA,YAfJ;AAAA,kBADJ;AAuBH,CAtEM;;GAAMjC,S;UAEWd,S,EACCC,e,EAGGC,gB,EASoCW,c;;;KAfnDC,S","sourcesContent":["import {Token} from \"../Main\"\nimport {useEthers, useTokenBalance, useNotifications} from \"@usedapp/core\"\nimport {formatUnits} from \"@ethersproject/units\"\nimport {Button, Input, CircularProgress, Snackbar} from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport React, {useState, useEffect} from \"react\"\nimport {constants, utils} from \"ethers\"\nimport {useStakeTokens} from \"../../hooks/useStakeStokens\"\n\nexport interface StakeFormProps {\n    token: Token\n}\n\nexport const StakeForm = ({token}: StakeFormProps) => {\n    const {address: tokenAddress, name} = token\n    const { account } = useEthers()\n    const tokenBalance = useTokenBalance(tokenAddress, account)\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n\n    const {notifications} = useNotifications()\n\n    const [amount, setAmount] = useState<number | string | Array<number | string>>(0)\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newAmount = event.target.value === \"\" ? \"\" : Number(event.target.value)\n        setAmount(newAmount)\n        console.log(newAmount)\n    }\n\n    const {approveAndStake, state: approveAndStakeErc20State} = useStakeTokens(tokenAddress)\n    const handleStakeSubmit = () => {\n        const amountAsWei = utils.parseEther(amount.toString())\n        return approveAndStake(amountAsWei.toString())\n    }\n\n    const isMining = approveAndStakeErc20State.status === \"Mining\"\n    const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] = useState(false)\n    const [showStakeTokenSuccess, setStakeTokenSuccess] = useState(false)\n    const handleCloseSnack = () => {\n        setShowErc20ApprovalSuccess(false)\n        setStakeTokenSuccess(false)\n    }\n\n    useEffect(() => {\n        if(notifications.filter(\n            (notification) => \n                notification.type === \"transactionSucceed\" && notification.transactionName === \"Approve ERC20 transfer\"\n        ).length > 0 ){\n            console.log(\"Approved!\")\n            setShowErc20ApprovalSuccess(true)\n            setStakeTokenSuccess(false)\n        }\n        if(notifications.filter(\n            (notification) => notification.type === \"transactionSucceed\" && notification.transactionName === \"Stake Tokens\"\n        ).length > 0){\n            console.log(\"Tokens Staked!\")\n            setShowErc20ApprovalSuccess(false)\n            setStakeTokenSuccess(true)\n        }\n    }, [notifications, showErc20ApprovalSuccess, showStakeTokenSuccess])\n\n    return(\n        <>\n            <Input onChange={handleInputChange} />\n            <div>\n            <Button color=\"primary\" size=\"large\"\n                onClick={handleStakeSubmit}\n                disabled={isMining}\n                >\n                {isMining? <CircularProgress size={26} /> : \"Stake!!\"}\n            </Button>\n            </div>\n            <Snackbar open={showErc20ApprovalSuccess} \n                autoHideDuration={5000}\n                onClose={handleCloseSnack}>\n                    <Alert onClose={handleCloseSnack} severity=\"success\">ERC-20 Token Transfer approved! Now approve the 2nd Transaction</Alert>\n                </Snackbar>\n            <Snackbar open={showStakeTokenSuccess} \n                autoHideDuration={5000}\n                onClose={handleCloseSnack}>\n                    <Alert onClose={handleCloseSnack} severity=\"success\">Tokens Staked!</Alert>\n                </Snackbar>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}